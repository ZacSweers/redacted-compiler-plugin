import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "com.vanniktech:gradle-maven-publish-plugin:${maven_publish_plugin_version}"
        classpath "com.android.tools.build:gradle:4.1.1"
        classpath "org.jetbrains.kotlinx:binary-compatibility-validator:${binary_validator_version}"
        classpath "dev.zacsweers.redacted:redacted-compiler-plugin-gradle"
    }
}

apply plugin: "binary-compatibility-validator"

apiValidation {
    if (!JavaVersion.current().isJava9Compatible() && System.getenv("ANDROID_HOME") != null) {
        ignoredProjects += 'sample-android'
    }
    ignoredProjects += ["sample"]
}

String resolvedJvmTarget = System.getenv().getOrDefault("ci_java_version", "1.8")
allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    pluginManager.withPlugin("org.jetbrains.kotlin.jvm") {
        project.tasks.withType(KotlinCompile).configureEach {
            kotlinOptions {
                jvmTarget = resolvedJvmTarget
                freeCompilerArgs += ['-progressive', '-Xjvm-default=all']
                useIR = false
            }
        }
    }

    pluginManager.withPlugin("org.jetbrains.kotlin.android") {
        project.tasks.withType(KotlinCompile).configureEach {
            kotlinOptions {
                jvmTarget = resolvedJvmTarget
                freeCompilerArgs += ['-progressive', '-Xjvm-default=all']
                useIR = false
            }
        }
    }

    pluginManager.withPlugin("org.jetbrains.dokka") {
        tasks.named("dokkaHtml") {
            outputDirectory.set(rootDir.resolve("docs/0.x"))
            dokkaSourceSets.configureEach {
                skipDeprecated.set(true)
            }
            // Suppress a package
            perPackageOption {
                matchingRegex.set(/.*\.internal.*/)
                suppress.set(true)
            }
        }
    }
}

subprojects {
    configurations.configureEach {
        resolutionStrategy {
            dependencySubstitution {
                // The Kotlin plugin will try to add the redacted-compiler-plugin to dependencies with a version
                // We have it local to this project, so we want it to just substitute that with the local project
                // Not needed for external consumers
                substitute module('dev.zacsweers.redacted:redacted-compiler-plugin') with project(':redacted-compiler-plugin')

                // The Gradle plugin will add the annotations artifact to dependencies if a custom annotation isn't defined.
                // Not needed for external consumers
                substitute module('dev.zacsweers.redacted:redacted-compiler-plugin-annotations') with project(':redacted-compiler-plugin-annotations')
            }
        }
    }
}
