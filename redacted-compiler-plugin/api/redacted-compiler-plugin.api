public final class dev/zacsweers/redacted/compiler/RedactedCommandLineProcessor : org/jetbrains/kotlin/compiler/plugin/CommandLineProcessor {
	public fun <init> ()V
	public fun getPluginId ()Ljava/lang/String;
	public fun getPluginOptions ()Ljava/util/Collection;
	public fun processOption (Lorg/jetbrains/kotlin/compiler/plugin/AbstractCliOption;Ljava/lang/String;Lorg/jetbrains/kotlin/config/CompilerConfiguration;)V
}

public final class dev/zacsweers/redacted/compiler/RedactedComponentRegistrar : org/jetbrains/kotlin/compiler/plugin/ComponentRegistrar {
	public fun <init> ()V
	public fun getSupportsK2 ()Z
	public fun registerProjectComponents (Lorg/jetbrains/kotlin/com/intellij/mock/MockProject;Lorg/jetbrains/kotlin/config/CompilerConfiguration;)V
}

public final class dev/zacsweers/redacted/compiler/fir/FirRedactedCheckers : org/jetbrains/kotlin/fir/analysis/extensions/FirAdditionalCheckersExtension {
	public fun <init> (Lorg/jetbrains/kotlin/fir/FirSession;)V
	public fun getDeclarationCheckers ()Lorg/jetbrains/kotlin/fir/analysis/checkers/declaration/DeclarationCheckers;
}

public final class dev/zacsweers/redacted/compiler/fir/FirRedactedDeclarationChecker : org/jetbrains/kotlin/fir/analysis/checkers/declaration/FirDeclarationChecker {
	public static final field INSTANCE Ldev/zacsweers/redacted/compiler/fir/FirRedactedDeclarationChecker;
	public synthetic fun check (Lorg/jetbrains/kotlin/fir/declarations/FirDeclaration;Lorg/jetbrains/kotlin/fir/analysis/checkers/context/CheckerContext;Lorg/jetbrains/kotlin/diagnostics/DiagnosticReporter;)V
	public fun check (Lorg/jetbrains/kotlin/fir/declarations/FirRegularClass;Lorg/jetbrains/kotlin/fir/analysis/checkers/context/CheckerContext;Lorg/jetbrains/kotlin/diagnostics/DiagnosticReporter;)V
}

public final class dev/zacsweers/redacted/compiler/fir/FirRedactedExtensionRegistrar : org/jetbrains/kotlin/fir/extensions/FirExtensionRegistrar {
	public fun <init> (Lorg/jetbrains/kotlin/name/ClassId;)V
}

public final class dev/zacsweers/redacted/compiler/fir/FirRedactedExtensionRegistrarKt {
	public static final fun getRedactedPredicateMatcher (Lorg/jetbrains/kotlin/fir/FirSession;)Ldev/zacsweers/redacted/compiler/fir/FirRedactedPredicateMatcher;
}

public final class dev/zacsweers/redacted/compiler/fir/FirRedactedPredicateMatcher : org/jetbrains/kotlin/fir/extensions/FirExtensionSessionComponent {
	public static final field Companion Ldev/zacsweers/redacted/compiler/fir/FirRedactedPredicateMatcher$Companion;
	public fun <init> (Lorg/jetbrains/kotlin/fir/FirSession;Lorg/jetbrains/kotlin/name/ClassId;)V
	public final fun redactedAnnotation (Lorg/jetbrains/kotlin/fir/declarations/FirDeclaration;)Lorg/jetbrains/kotlin/fir/expressions/FirAnnotation;
}

public final class dev/zacsweers/redacted/compiler/fir/FirRedactedPredicateMatcher$Companion {
	public final fun getFactory (Lorg/jetbrains/kotlin/name/ClassId;)Lorg/jetbrains/kotlin/fir/extensions/FirExtensionSessionComponent$Factory;
}

public final class dev/zacsweers/redacted/compiler/fir/KtErrorsRedacted {
	public static final field INSTANCE Ldev/zacsweers/redacted/compiler/fir/KtErrorsRedacted;
	public final fun getCUSTOM_TO_STRING_IN_REDACTED_CLASS_ERROR ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getREDACTED_ON_CLASS_AND_PROPERTY_WARNING ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getREDACTED_ON_NON_CLASS_ERROR ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
	public final fun getREDACTED_ON_NON_DATA_CLASS_ERROR ()Lorg/jetbrains/kotlin/diagnostics/KtDiagnosticFactory0;
}

